class Solution {
public:
int memo_helper(int i , int j , string s1 , string s2 , vector<vector<int>> dp){
        if(i == 0 || j == 0) return 0;
        if(dp[i][j] != -1) return dp[i][j];
        if(s1[i - 1] == s2[j - 1])
            return dp[i][j] = 1 + memo_helper(i - 1 , j - 1 , s1 , s2 , dp);
            
        return dp[i][j] = max(memo_helper(i, j - 1 , s1 , s2 , dp) , memo_helper(i - 1, j, s1 , s2 , dp));
    }
    int memo(int n , int m , string s1 , string s2){
        vector<vector<int>> dp(n + 1 , vector<int>(m + 1 , -1));
        // shifting the index for tabulation
        return memo_helper(n , m, s1 , s2 , dp);
    }

    int longestCommonSubsequence(string s1, string s2) {
        int n = s1.size();
        int m = s2.size();
        int ans = memo(n, m , s1 , s2);
        return ans;
    }
};
